package com.zhoukewei.nlp.util;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


public class JDBCTools {
	/**椹卞姩*/
	private final String driver="com.mysql.jdbc.Driver";
	/**杩炴帴淇℃伅*/
	private final String url="jdbc:mysql://localhost:3308/";
	/**鐢ㄦ埛鍚�*/
	private final String userName="root";
	/**瀵嗙爜*/
	private final String password="123456";
	/**鏁版嵁搴�*/
	private final String database="nlp_db";
	/**杩炴帴瀵硅薄*/
	private Connection con;
	/**棰勭紪璇戝璞�*/
	private PreparedStatement ps;
	/**缁撴灉闆�*/
	private ResultSet rs;
	/**
	 * 鏋勯�犳柟娉�
	 */
	public JDBCTools(){
		try {
			//1銆佹壘鍒拌蒋浠剁殑鍚姩绋嬪簭銆愬姞杞介┍鍔ㄣ��
			Class.forName(driver);
			//2銆佸～鍐欓摼鎺ヤ俊鎭�愯幏鍙栭摼鎺ュ璞°��
			con= DriverManager.getConnection(url+database,userName,password);
			//3銆佹壘鍒颁竴涓啓sql鐨勭獥鍙ｃ�愬垱寤轰竴涓墽琛宻ql璇彞鐨勫璞°��
			//ps= con.createStatement();

		} catch (ClassNotFoundException e) {
			e.printStackTrace();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
	/**
	 * 鎵цDML璇彞
	 * @author 
	 * @title: Update
	 * @date 2016骞�6鏈�5鏃� 涓婂崍10:39:00
	 * @param sql void
	 */
	public void Update(String sql,String[]param){
		try {
			ps=con.prepareStatement(sql);
			if (param!=null) {
				for (int i = 0; i < param.length; i++) {
					ps.setString(i+1, param[i]);
				}
			}
			ps.executeUpdate();
			//System.out.println("娣诲姞鎴愬姛");
		} catch (SQLException e) {
			System.out.println("娣诲姞澶辫触");
			e.printStackTrace();
		}
	}
	public void Update(String sql){
		Update(sql,null);
	}
	/**
	 * 鎵цDQL璇彞
	 * @author 鏉庤嚜鏂�
	 * @title: Query
	 * @date 2016骞�6鏈�5鏃� 涓婂崍10:39:06
	 * @param sql
	 * @return ResultSet
	 */
	public List<List<String>> queryList(String sql,String[]param){
		List<List<String>> tableList = new  ArrayList<List<String>>();
		try {
			ps=con.prepareStatement(sql);
			if (param!=null) {
				for (int i = 0; i < param.length; i++) {
					ps.setString(i+1, param[i]);
				}
			}
			rs = ps.executeQuery();
			//閫氳繃姝ゅ璞¤幏鍙杝ql璇彞涓垪鐨勭浉鍏充俊鎭�
			ResultSetMetaData rsmd= rs.getMetaData();
			//鍒楃殑涓暟
			int columnCount =rsmd.getColumnCount();
			while (rs.next()) {
				List<String> row = new ArrayList<String>();
				//鎶婃暟鎹簱涓綋鍓嶈鐨勬瘡涓垪鐨勪俊鎭斁鍒皉ow涓�
				for (int col = 1; col <=columnCount; col++) {
					row.add(rs.getString(col));
				}
				//鎶婂綋鍓嶈鏁版嵁鏀惧埌琛ㄦ牸涓�
				tableList.add(row);			
			}		
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return tableList;
	}
	public List<List<String>> queryList(String sql){
		return queryList(sql,null);
	}
	public List<Map<String, String>> queryMap(String sql,String[]param){
		List<Map<String, String>> tableList = new  ArrayList<Map<String, String>>();
		try {
			ps=con.prepareStatement(sql);
			if (param!=null) {
				for (int i = 0; i < param.length; i++) {
					ps.setString(i+1, param[i]);
					
				}
			}
			rs = ps.executeQuery();
			//閫氳繃姝ゅ璞¤幏鍙杝ql璇彞涓垪鐨勭浉鍏充俊鎭�
			ResultSetMetaData rsmd= rs.getMetaData();
			//鍒楃殑涓暟
			int columnCount =rsmd.getColumnCount();
			while (rs.next()) {
				Map<String,String> row = new HashMap<String, String>();
				//鎶婃暟鎹簱涓綋鍓嶈鐨勬瘡涓垪鐨勪俊鎭斁鍒皉ow涓�
				for (int col = 1; col <=columnCount; col++) {
					row.put(rsmd.getColumnName(col).toLowerCase(), rs.getString(col));
				}
				//鎶婂綋鍓嶈鏁版嵁鏀惧埌琛ㄦ牸涓�
				tableList.add(row);			
			}		
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return tableList;
	}
	public List<Map<String, String>> queryMap(String sql){
		return queryMap(sql,null);
	}
}
